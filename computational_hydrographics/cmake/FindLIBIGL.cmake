# - Try to find the LIBIGL library
# Once done this will define
#
#  LIBIGL_FOUND - system has LIBIGL
#  LIBIGL_INCLUDE_DIR - the LIBIGL include directory
#  LIBIGL_SOURCES - the LIBIGL source files

if(NOT LIBIGL_FOUND)

# Mosek is not required but must be found before libigl to ensure correct flags
# are set
find_package(Mosek QUIET)

FIND_PATH(LIBIGL_INCLUDE_DIR igl/readOBJ.h
   /usr/include
   /usr/local/include
   $ENV{LIBIGLROOT}/include
   $ENV{LIBIGL_ROOT}/include
   $ENV{LIBIGL_DIR}/include
   $ENV{LIBIGL_DIR}/inc
   ${PROJECT_SOURCE_DIR}/../libigl/include
   ${PROJECT_SOURCE_DIR}/../../libigl/include
   ${PROJECT_SOURCE_DIR}/../../include
    ~/Documents/igl/libigl/include
)

if(LIBIGL_INCLUDE_DIR)
   set(LIBIGL_FOUND TRUE)
   #olga: changed this
   #set(LIBIGL_INCLUDE_DIR ${LIBIGL_INCLUDE_DIR}  ${LIBIGL_INCLUDE_DIR}/../external/Singular_Value_Decomposition)
   #to this:
   set(LIBIGL_INCLUDE_DIR ${LIBIGL_INCLUDE_DIR})
   #set(LIBIGL_SOURCES
   #   ${LIBIGL_INCLUDE_DIR}/igl/viewer/Viewer.cpp
   #)
  set(LIBIGL_FOUND TRUE)
endif(LIBIGL_INCLUDE_DIR)

if (NOT MOSEK_FOUND)
  add_definitions(-DIGL_NO_MOSEK)
endif (NOT MOSEK_FOUND)

if(LIBIGL_USE_STATIC_LIBRARY)
  add_definitions(-DIGL_STATIC_LIBRARY)
  set(LIBIGL_LIB_DIRS
   /usr/lib
   /usr/local/lib
   $ENV{LIBIGLROOT}/lib
   $ENV{LIBIGL_ROOT}/lib
   $ENV{LIBIGL_DIR}/lib
   ${PROJECT_SOURCE_DIR}/../libigl/lib
   ${PROJECT_SOURCE_DIR}/../../libigl/lib
   ${PROJECT_SOURCE_DIR}/../../lib
   ${LIBIGL_INCLUDE_DIR}/../lib
   )
  FIND_LIBRARY( LIBIGL_LIBRARY NAMES igl PATHS ${LIBIGL_LIB_DIRS})
  if(NOT LIBIGL_LIBRARY)
    set(LIBIGL_FOUND FALSE)
  endif(NOT LIBIGL_LIBRARY)
  set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGL_LIBRARY})

  if (IGL_WITH_BBW)
    FIND_LIBRARY( LIBIGLBBW_LIBRARY NAMES iglbbw PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLBBW_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find BBW")
    endif(NOT LIBIGLBBW_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLBBW_LIBRARY})
  endif(IGL_WITH_BBW)

  if (IGL_WITH_MOSEK)
    FIND_LIBRARY( LIBIGLMOSEK_LIBRARY NAMES iglmosek PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLMOSEK_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find MOSEK")
    endif(NOT LIBIGLMOSEK_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLMOSEK_LIBRARY})
    if(MOSEK_FOUND)
      set(LIBIGL_INCLUDE_DIR ${LIBIGL_INCLUDE_DIR}  ${MOSEK_INCLUDE_DIR})
      set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${MOSEK_LIBRARIES})
    else(MOSEK_FOUND)
      set(LIBIGL_FOUND FALSE)
    endif(MOSEK_FOUND)
  endif (IGL_WITH_MOSEK)

  if (IGL_WITH_EMBREE)
    FIND_LIBRARY( LIBIGLEMBREE_LIBRARY NAMES iglembree PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLEMBREE_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find embree")
    endif(NOT LIBIGLEMBREE_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLEMBREE_LIBRARY})
    find_package(Embree REQUIRED)
  endif (IGL_WITH_EMBREE)

  if (IGL_WITH_COMISO)
    FIND_LIBRARY( LIBIGLCOMISO_LIBRARY NAMES iglcomiso PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLCOMISO_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find comiso")
    endif(NOT LIBIGLCOMISO_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLCOMISO_LIBRARY})
    find_package(Comiso REQUIRED)
  endif (IGL_WITH_COMISO)

    if (IGL_WITH_LIM)
    FIND_LIBRARY( LIBIGLLIM_LIBRARY NAMES igllim PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLLIM_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find LIM")
    endif(NOT LIBIGLLIM_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLLIM_LIBRARY})
  endif (IGL_WITH_LIM)

  if (IGL_WITH_MATLAB)
    FIND_LIBRARY( LIBIGLMATLAB_LIBRARY NAMES iglmatlab PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLMATLAB_LIBRARY)
      set(LIBIGL_FOUND FALSE)
    endif(NOT LIBIGLMATLAB_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLMATLAB_LIBRARY})
    find_package(Matlab REQUIRED)
    if(MATLAB_FOUND)
      set(LIBIGL_INCLUDE_DIR ${LIBIGL_INCLUDE_DIR}  ${MATLAB_INCLUDE_DIR})
      set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${MATLAB_LIBRARIES})
      message(STATUS "Did not find MATLAB")
    else(MATLAB_FOUND)
      set(LIBIGL_FOUND FALSE)
    endif(MATLAB_FOUND)
  endif (IGL_WITH_MATLAB)

  if (IGL_WITH_SVD3X3)
    FIND_LIBRARY( LIBIGLSVD3X3_LIBRARY NAMES iglsvd3x3 PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLSVD3X3_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find svd3x3")
    endif(NOT LIBIGLSVD3X3_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLSVD3X3_LIBRARY})
  endif (IGL_WITH_SVD3X3)

  if (IGL_WITH_TETGEN)
    FIND_LIBRARY( LIBIGLTETGEN_LIBRARY NAMES igltetgen PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLTETGEN_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find tetgen")
    endif(NOT LIBIGLTETGEN_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLTETGEN_LIBRARY})
  endif(IGL_WITH_TETGEN)

  if (IGL_WITH_TRIAGLE)
    FIND_LIBRARY( LIBIGLTRIANGLE_LIBRARY NAMES igltriangle PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLTRIANGLE_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find Triangle")
    endif(NOT LIBIGLTRIANGLE_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLTRIANGLE_LIBRARY})
  endif (IGL_WITH_TRIAGLE)

  if (IGL_WITH_VIEWER)
    FIND_LIBRARY( LIBIGLVIEWER_LIBRARY NAMES iglviewer PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLVIEWER_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find IGL Viewer")
    endif(NOT LIBIGLVIEWER_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLVIEWER_LIBRARY})
  endif(IGL_WITH_VIEWER)

  if (IGL_WITH_PNG)
    FIND_LIBRARY( LIBIGLPNG_LIBRARY NAMES iglpng PATHS ${LIBIGL_LIB_DIRS})
    if(NOT LIBIGLPNG_LIBRARY)
      set(LIBIGL_FOUND FALSE)
      message(STATUS "Did not find PNG")
    endif(NOT LIBIGLPNG_LIBRARY)
    set(LIBIGL_LIBRARIES ${LIBIGL_LIBRARIES}  ${LIBIGLPNG_LIBRARY})
  endif(IGL_WITH_PNG)

    IF (IGL_WITH_OPENMP)
    find_package(OpenMP)
    if (OPENMP_FOUND)
      set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
      set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    else(OPENMP_FOUND)
      message(STATUS "Did not find OpenMP")
      set(LIBIGL_FOUND false)
    endif(OPENMP_FOUND)
  endif (IGL_WITH_OPENMP)

endif(LIBIGL_USE_STATIC_LIBRARY)



if(LIBIGL_FOUND)
   if(NOT LIBIGL_FIND_QUIETLY)
      message(STATUS "Found LIBIGL: ${LIBIGL_INCLUDE_DIR}")
   endif(NOT LIBIGL_FIND_QUIETLY)
else(LIBIGL_FOUND)
   if(LIBIGL_FIND_REQUIRED)
      message(FATAL_ERROR "could NOT find LIBIGL")
   endif(LIBIGL_FIND_REQUIRED)
endif(LIBIGL_FOUND)

MARK_AS_ADVANCED(LIBIGL_INCLUDE_DIR LIBIGL_LIBRARIES IGL_VIEWER_SOURCES)

endif(NOT LIBIGL_FOUND)
